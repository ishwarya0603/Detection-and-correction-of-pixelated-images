mport numpy as np
import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Conv2D, Input
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing.image import img_to_array, load_img, ImageDataGenerator
from tensorflow.keras.callbacks import EarlyStopping, LearningRateScheduler
import matplotlib.pyplot as plt

TRAIN_HR_DIR = r'D:\finaldataset\HR_train1'
TRAIN_LR_DIRS = [
    r'D:\finaldataset\LR_train\FinalLR1_train2',
    r'D:\finaldataset\LR_train\FinalLR1_train3',
    r'D:\finaldataset\LR_train\FinalLR1_train4',
    r'D:\finaldataset\LR_train\FinalLR1_train5',
    r'D:\finaldataset\LR_train\FinalLR1_train6'
]

VALID_HR_DIR = r'D:\finaldataset\HR_valid1'
VALID_LR_DIRS = [
    r'D:\finaldataset\LR_valid\FinalLR1_valid2',
    r'D:\finaldataset\LR_valid\FinalLR1_valid3',
    r'D:\finaldataset\LR_valid\FinalLR1_valid4',
    r'D:\finaldataset\LR_valid\FinalLR1_valid5',
    r'D:\finaldataset\LR_valid\FinalLR1_valid6'
]

MODEL_SAVE_PATH = r'D:\srcnn_model.keras'

def custom_image_generator(lr_dirs, hr_dir, batch_size=16, target_size=(256, 256)):
    while True:
        lr_images = []
        hr_images = []
        for _ in range(batch_size):
            lr_img_path = np.random.choice([os.path.join(dir, f) for dir in lr_dirs for f in os.listdir(dir)])
            hr_img_path = os.path.join(hr_dir, os.path.basename(lr_img_path))
            
            lr_img = load_img(lr_img_path, target_size=target_size)
            lr_img = img_to_array(lr_img) / 255.0
            hr_img = load_img(hr_img_path, target_size=target_size)
            hr_img = img_to_array(hr_img) / 255.0
            
            lr_images.append(lr_img)
            hr_images.append(hr_img)
        
        yield np.array(lr_images), np.array(hr_images)

# Function to Calculate PSNR
def psnr(y_true, y_pred):
    max_pixel = 1.0
    return tf.image.psnr(y_true, y_pred, max_val=max_pixel)

# Function to Build Deeper SRCNN Model
def build_deeper_srcnn():
    input_shape = (None, None, 3)
    inputs = Input(shape=input_shape)
    conv1 = Conv2D(64, (9, 9), activation='relu', padding='same')(inputs)
    conv2 = Conv2D(32, (1, 1), activation='relu', padding='same')(conv1)
    conv3 = Conv2D(32, (3, 3), activation='relu', padding='same')(conv2)
    outputs = Conv2D(3, (5, 5), activation='linear', padding='same')(conv3)
    model = Model(inputs, outputs)
    return model

# Build and Compile the Model
learning_rate = 0.0001
deeper_srcnn_model = build_deeper_srcnn()
deeper_srcnn_model.compile(optimizer=Adam(learning_rate=learning_rate), loss='mean_squared_error', metrics=[psnr])

# Learning Rate Scheduler
def lr_schedule(epoch):
    initial_lr = 0.0001
    if epoch < 10:
        return initial_lr
    else:
        return initial_lr * np.exp(0.1 * (10 - epoch))

lr_scheduler = LearningRateScheduler(lr_schedule)

# Early Stopping Callback
early_stopping = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)

# Load and Preprocess Data
batch_size = 32
train_generator = custom_image_generator(TRAIN_LR_DIRS, TRAIN_HR_DIR, batch_size=batch_size)
valid_generator = custom_image_generator(VALID_LR_DIRS, VALID_HR_DIR, batch_size=batch_size)

# Train the Model
epochs = 50
steps_per_epoch = sum([len(os.listdir(dir)) for dir in TRAIN_LR_DIRS]) // batch_size
validation_steps = sum([len(os.listdir(dir)) for dir in VALID_LR_DIRS]) // batch_size

model = deeper_srcnn_model.fit(
    train_generator,
    validation_data=valid_generator,
    steps_per_epoch=steps_per_epoch,
    validation_steps=validation_steps,
    epochs=epochs,
    verbose=1,
    callbacks=[early_stopping, lr_scheduler]
)

total_training_loss = sum(history.history['loss'])
print("Total Training Loss:", total_training_loss)

test_lr_images, test_hr_images = next(valid_generator)
test_loss, test_psnr = deeper_srcnn_model.evaluate(test_lr_images, test_hr_images)
print("Test Loss:", test_loss)
print("Test PSNR:", test_psnr)

deeper_srcnn_model.save(MODEL_SAVE_PATH)

plt.figure(figsize=(10, 5))
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Valid Loss')
plt.title('Training and Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()

plt.figure(figsize=(10, 5))
plt.plot(history.history['psnr'], label='Train PSNR')
plt.plot(history.history['val_psnr'], label='Valid PSNR')
plt.title('Training and Validation PSNR')
plt.xlabel('Epochs')
plt.ylabel('PSNR')
plt.legend()
plt.show()
